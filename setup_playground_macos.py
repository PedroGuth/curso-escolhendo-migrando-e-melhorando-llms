#!/usr/bin/env python3
"""
Script de Setup para macOS - Playground Interativo
Resolve problemas de permiss√µes e compatibilidade no macOS
"""

import subprocess
import sys
import os
import platform

def run_command(command, description):
    """Executa um comando e mostra o progresso"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Conclu√≠do!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro:")
        print(f"   {e.stderr}")
        return False

def check_system():
    """Verifica se √© macOS e detecta problemas de permiss√£o"""
    if platform.system() != "Darwin":
        print("‚ö†Ô∏è Este script √© espec√≠fico para macOS!")
        return False
    
    print(f"üçé macOS detectado: {platform.mac_ver()[0]}")
    
    # Verificar se Python est√° no diret√≥rio do sistema
    python_path = sys.executable
    if "/Library/Frameworks/" in python_path:
        print("‚ö†Ô∏è Python instalado no diret√≥rio do sistema (requer sudo)")
        return True
    else:
        print("‚úÖ Python instalado em localiza√ß√£o segura")
        return False

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        print(f"   Vers√£o atual: {version.major}.{version.minor}.{version.micro}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK!")
    return True

def install_homebrew():
    """Instala Homebrew se n√£o estiver dispon√≠vel"""
    try:
        result = subprocess.run(["brew", "--version"], capture_output=True, text=True)
        print("‚úÖ Homebrew j√° instalado")
        return True
    except FileNotFoundError:
        print("üîÑ Instalando Homebrew...")
        install_command = '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
        print("‚ö†Ô∏è Execute o comando abaixo no terminal:")
        print(f"   {install_command}")
        print("‚ö†Ô∏è Depois execute novamente este script")
        return False

def create_virtual_environment():
    """Cria ambiente virtual para evitar problemas de permiss√£o"""
    venv_name = "playground_env"
    
    if os.path.exists(venv_name):
        print(f"‚úÖ Ambiente virtual '{venv_name}' j√° existe")
        return venv_name
    
    print(f"üîÑ Criando ambiente virtual '{venv_name}'...")
    if run_command(f"{sys.executable} -m venv {venv_name}", "Criando ambiente virtual"):
        return venv_name
    return None

def install_in_virtual_environment(venv_name):
    """Instala depend√™ncias no ambiente virtual"""
    # Determinar o comando de ativa√ß√£o baseado no shell
    shell = os.environ.get('SHELL', '')
    if 'zsh' in shell:
        activate_cmd = f"source {venv_name}/bin/activate"
    elif 'bash' in shell:
        activate_cmd = f"source {venv_name}/bin/activate"
    else:
        activate_cmd = f"source {venv_name}/bin/activate"
    
    print("üîÑ Instalando depend√™ncias no ambiente virtual...")
    
    # Comandos para instalar no ambiente virtual
    commands = [
        f"{venv_name}/bin/pip install --upgrade pip",
        f"{venv_name}/bin/pip install 'numpy>=1.24.0,<2.0.0'",
        f"{venv_name}/bin/pip install 'pandas>=1.5.0'",
        f"{venv_name}/bin/pip install 'plotly>=5.15.0'",
        f"{venv_name}/bin/pip install 'streamlit>=1.28.0'",
        f"{venv_name}/bin/pip install 'openpyxl>=3.0.0'",
        f"{venv_name}/bin/pip install 'xlrd>=2.0.0'"
    ]
    
    for cmd in commands:
        if not run_command(cmd, f"Executando: {cmd.split()[-1]}"):
            return False
    
    return True

def test_installation(venv_name):
    """Testa se a instala√ß√£o foi bem-sucedida"""
    print("\nüß™ Testando instala√ß√£o...")
    
    test_code = """
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# Teste b√°sico
df = pd.DataFrame({'x': [1, 2, 3], 'y': [4, 5, 6]})
fig = px.scatter(df, x='x', y='y')
print("‚úÖ Todas as bibliotecas importadas com sucesso!")
print("‚úÖ Playground pronto para uso!")
"""
    
    try:
        result = subprocess.run([f"{venv_name}/bin/python", "-c", test_code], 
                              capture_output=True, text=True, check=True)
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print("‚ùå Erro no teste:")
        print(e.stderr)
        return False

def show_next_steps(venv_name):
    """Mostra os pr√≥ximos passos"""
    print("\nüéâ Instala√ß√£o Conclu√≠da!")
    print("=" * 50)
    print("üìã Pr√≥ximos Passos:")
    print("")
    print("1. Ative o ambiente virtual:")
    print(f"   source {venv_name}/bin/activate")
    print("")
    print("2. Execute o playground:")
    print("   streamlit run playground_interativo.py")
    print("")
    print("3. O playground abrir√° automaticamente no navegador")
    print("   (geralmente em http://localhost:8501)")
    print("")
    print("4. Navegue pelas se√ß√µes usando o menu lateral")
    print("")
    print("5. Experimente o simulador interativo!")
    print("")
    print("üí° Dicas:")
    print("   - Sempre ative o ambiente virtual antes de usar")
    print("   - Para desativar: deactivate")
    print("   - Use navegadores modernos (Chrome, Firefox, Safari)")

def show_alternative_solutions():
    """Mostra solu√ß√µes alternativas"""
    print("\nüîß Solu√ß√µes Alternativas:")
    print("=" * 40)
    print("")
    print("1. Usar Homebrew Python (Recomendado):")
    print("   brew install python@3.11")
    print("   brew link python@3.11")
    print("")
    print("2. Usar pyenv:")
    print("   brew install pyenv")
    print("   pyenv install 3.11.0")
    print("   pyenv global 3.11.0")
    print("")
    print("3. Usar Anaconda/Miniconda:")
    print("   brew install --cask miniconda")
    print("   conda create -n playground python=3.11")
    print("   conda activate playground")
    print("")
    print("4. Instalar com sudo (n√£o recomendado):")
    print("   sudo pip install -r requirements_streamlit.txt")

def main():
    """Fun√ß√£o principal"""
    print("üçé Setup do Playground Interativo - macOS")
    print("=" * 50)
    
    # Verificar sistema
    if not check_system():
        print("‚ùå Este script √© espec√≠fico para macOS!")
        return
    
    # Verificar vers√£o do Python
    if not check_python_version():
        return
    
    # Verificar se Python est√° no diret√≥rio do sistema
    system_python = "/Library/Frameworks/" in sys.executable
    
    if system_python:
        print("\n‚ö†Ô∏è Python detectado no diret√≥rio do sistema!")
        print("üîß Usando ambiente virtual para evitar problemas de permiss√£o...")
        
        # Criar ambiente virtual
        venv_name = create_virtual_environment()
        if not venv_name:
            print("‚ùå Falha ao criar ambiente virtual!")
            show_alternative_solutions()
            return
        
        # Instalar no ambiente virtual
        if not install_in_virtual_environment(venv_name):
            print("‚ùå Falha na instala√ß√£o!")
            show_alternative_solutions()
            return
        
        # Testar instala√ß√£o
        if not test_installation(venv_name):
            print("‚ùå Falha no teste!")
            return
        
        # Mostrar pr√≥ximos passos
        show_next_steps(venv_name)
        
    else:
        print("\n‚úÖ Python em localiza√ß√£o segura!")
        print("üîß Instalando diretamente...")
        
        # Tentar instala√ß√£o direta
        if run_command(f"{sys.executable} -m pip install --upgrade pip", "Atualizando pip"):
            if run_command(f"{sys.executable} -m pip install 'numpy>=1.24.0,<2.0.0'", "Instalando NumPy"):
                if run_command(f"{sys.executable} -m pip install streamlit pandas plotly", "Instalando outras depend√™ncias"):
                    print("‚úÖ Instala√ß√£o conclu√≠da!")
                    print("\nüìã Para executar:")
                    print("   streamlit run playground_interativo.py")
                else:
                    show_alternative_solutions()
            else:
                show_alternative_solutions()
        else:
            show_alternative_solutions()

if __name__ == "__main__":
    main() 